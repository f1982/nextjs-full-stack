// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  created_at DateTime  @default(now())
  posts      Post[]
  channels   Channel[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// other models
model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

// =====================
// YouTube script schema
// =====================
model Channel {
  id           String  @id @default(cuid())
  channel_name String
  keyword      String?
  description  String?
  url          String?
  language     String?
  host         String? //description of the virtual host, will be applied to all the prompts

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  videos  Video[]
  prompts Prompt[]
}

model Prompt {
  id          String  @id @default(cuid())
  name        String
  prompt      String
  description String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  channel    Channel @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channel_id String
}

model Video {
  id          String  @id @default(cuid())
  topic       String?
  title       String?
  short       String? // Short text show on the image
  abstract    String?
  outline     String?
  script      String?
  description String?
  tags        String?
  thumbnail   String?
  url         String?
  comment     String?
  post        String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  channel    Channel @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channel_id String
}
